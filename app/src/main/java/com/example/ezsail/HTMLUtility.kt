/*This whole html file style is inspired by html file generated by SailWave
* https://shotwicksailing.org/racingresults/2023/early_spring_series_2023.htm*/

package com.example.ezsail

import com.example.ezsail.db.entities.Race
import com.example.ezsail.db.entities.Series
import com.example.ezsail.db.entities.relations.OverallResultsWithBoatAndPYNumber
import com.example.ezsail.db.entities.relations.RaceResultsWithBoatAndPYNumber

object HTMLUtility {
    fun generateHTMLFile(
        series: Series,
        totalEntries: Int,
        sailedRaces: List<Race>,
        discardRaces: Int,
        overallResultsList: List<OverallResultsWithBoatAndPYNumber>,
        raceResultsListOrderByNett: List<RaceResultsWithBoatAndPYNumber>,
        raceResultsListOrderByPoints: List<RaceResultsWithBoatAndPYNumber>,
        codeList: List<Int>
    ): String {
        val countRaces = sailedRaces.size-discardRaces
        var raceResultPositionNett = 0
        var raceResultPositionPoints = 0

        // HTML file starts
        var html = "<!DOCTYPE html>" +
                "<html>" +
                "<head>" +
                "<meta charset=\"utf-8\">" +
                "<title>Hello World</title>" +
                // CSS style sheet from SailWave
                "<style type=\"text/css\">" +
                "body {font: 72% arial, helvetica, sans-serif; text-align: center;}" +
                ".hardleft  {text-align: left; float: left;  margin: 15px 0  15px 25px;}" +
                ".hardright {text-align: right; float: right; margin: 15px 25px 15px 0;}" +
                "table, caption {text-align: left; margin: 0px auto 30px auto; font-size: 1em; border-collapse: collapse; border: 1px #fff solid;}" +
                "td {padding: 4px; border-right: 1px #fff solid; border-bottom: 1px #000000 solid; vertical-align: down;}" +
                "th {padding: 4px; border: 1px #fff solid; border-bottom: 1px #000000 solid; vertical-align: top;}" +
                ".caption {padding: 5px; text-align: center; border: 0; font-weight: bold;}" +
                "h1 {font-size: 1.6em;}" +
                "h2 {font-size: 1.4em;}" +
                "h3 {font-size: 1.2em;}" +
                "p {text-align: center;}" +
                "th {background-color: #aaf;}" +
                ".contents {text-align: left; margin-left: 20%;}" +
                ".even {background-color: #bbf;}" +
                ".odd {background-color: #ddf;}" +
                ".natflag {border: 1px #999 solid;}" +
                ".nattext {font-size: 0.8em;}" +
                ".place1 {font-weight: bold; background-color: #ffffaa;}" +
                ".place2 {font-weight: bold; background-color: #aaaaff;}" +
                ".place3 {font-weight: bold; background-color: #ffaaaa;}" +
                ".placen {}" +
                "</style>" +
                "</head>" +
                "<body>" +
                "<div id=\"wrap\">" +
                // Series Title
                "<h1>${series.title}</h1>" +
                "<h2>Club Sailing</h2>" +
                "<div style=\"clear:both;\"></div>" +
                // Style sheet for tables
                "<style>" +
                "div.applicant-break {page-break-after:always;}" +
                "</style>" +
                "<h3>Overall</h3>" +
                "<div>" +
                "Sailed: ${sailedRaces.size}, Discards: ${discardRaces}, To count: ${countRaces}, " +
                "Rating system: PY, Entries: ${totalEntries}, Scoring system: Appendix A" +
                "</div>" +
                "<table class=\"summarytable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">" +
                "<colgroup span=\"9\">" +
                "<col class=\"rank\" />" +
                "<col class=\"class\" />" +
                "<col class=\"sailno\" />" +
                "<col class=\"helmname\" />" +
                "<col class=\"crewname\" />" +
                "<col class=\"rating\" />"

        // Add race columns
        sailedRaces.forEach {
            html += "<col class=\"race\" />"
        }

        html += "<col class=\"nett\" />" +
                "</colgroup>" +
                "<thead>" + // Add heads for table
                "<tr class=\"titlerow\">" +
                "<th>Rank</th>" +
                "<th>Class</th>" +
                "<th>SailNo</th>" +
                "<th>HelmName</th>" +
                "<th>CrewName</th>" +
                "<th>PY</th>"

        // Heads and hrefs for races
        sailedRaces.forEach {
            html += "<th><a class=\"racelink\" href=\"#r${it.raceNo}\">R${it.raceNo}</a></th>"
        }

        html += "<th>Nett</th>" +
                "</tr>" +
                "<tr class=\"odd daterow\">" + // Race Date Row
                "<td>&nbsp;</td>" +
                "<td>&nbsp;</td>" +
                "<td>&nbsp;</td>" +
                "<td>&nbsp;</td>" +
                "<td>&nbsp;</td>" +
                "<td>&nbsp;</td>"
        // Add dates for races
        sailedRaces.forEach {
            html += "<th>${TimingUtility.getFormattedDate(it.timestamp)}</th>"
        }
        html += "<td>&nbsp;</td>" +
                "</tr>" +
                "</thead>" +
                "<tbody>"

        // Overall Table Starts
        // Add overall result data for each sailor
        overallResultsList.forEach {
            // TODO: CHECK ODD OR EVEN
            html += "<tr class=\"" +
                    (if (overallResultsList.indexOf(it)%2 == 0) {
                        "even summaryrow"
                    } else {"odd summaryrow"}) +
                    "\">" +
                    "<td>${overallResultsList.indexOf(it)+1}</td>" +
                    "<td>${it.boatWithPYNumber.boat.boatClass}</td>" +
                    "<td>${it.boatWithPYNumber.boat.sailNo}</td>" +
                    "<td>${it.boatWithPYNumber.boat.helm}</td>" +
                    "<td>${it.boatWithPYNumber.boat.crew}</td>" +
                    "<td>${it.boatWithPYNumber.number.Number}</td>"
            // Add race result of that sailor
            for (i in raceResultPositionNett..<raceResultPositionNett+sailedRaces.size){
                // Check if code applied
                val code: Int
                val isExcluded: Boolean
                var pointsText = ""

                raceResultsListOrderByNett[i].raceResult.apply {
                    code = this.code
                    isExcluded = this.isExcluded
                }

                when(code) {
                    0 -> pointsText = "${raceResultsListOrderByNett[i].raceResult.points}"
                    1 -> pointsText = "${raceResultsListOrderByNett[i].raceResult.points} DNC"
                    2 -> pointsText = "${raceResultsListOrderByNett[i].raceResult.points} OOD"
                    3 -> pointsText = "${raceResultsListOrderByNett[i].raceResult.points} RET"
                    4 -> pointsText = "${raceResultsListOrderByNett[i].raceResult.points} DNF"
                }
                // Check if the result is discarded
                if (isExcluded) {
                    // If is excluded, add "(",")"
                    html += "<td>($pointsText)</td>"
                } else {
                    html += "<td>$pointsText</td>"
                }
            }
            // Update raceListPosition to get next sailor's race results
            raceResultPositionNett += sailedRaces.size
            html += "<td>${it.overallResult.nett}</td>" +
                    "</tr>"
        }
        // Overall Table End
        html += "</tbody>" +
                "</table>"

        // Race Table Starts
        // Add race table for each race
        sailedRaces.forEach {
            html += "<h3 class=\"racetitle\" id=\"r${it.raceNo}\">R${it.raceNo}" +
                    "&nbsp;-&nbsp;${TimingUtility.getFormattedDate(it.timestamp)}</h3>" +
                    "<div class=\"caption racecaption\">" +
                    "Start: Start 1, Finishes: Elapsed time" +
                    "</div>" +
                    "<table class=\"racetable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">" +
                    "<colgroup span=\"10\">" +
                    "<col class=\"class\" />" +
                    "<col class=\"sailno\" />" +
                    "<col class=\"helmname\" />" +
                    "<col class=\"crewname\" />" +
                    "<col class=\"rating\" />" +
                    "<col class=\"elapsed\" />" +
                    "<col class=\"laps\" />" +
                    "<col class=\"corrected\" />" +
                    "<col class=\"points\" />" +
                    "</colgroup>" +
                    "<thead>" +
                    "<tr class=\"titlerow\">" +
                    "<th>Class</th>" +
                    "<th>SailNo</th>" +
                    "<th>HelmName</th>" +
                    "<th>CrewName</th>" +
                    "<th>PY</th>" +
                    "<th>Elapsed</th>" +
                    "<th>Laps</th>" +
                    "<th>Corrected</th>" +
                    "<th>Points</th>" +
                    "</tr>" +
                    "</thead>" +
                    "<tbody>"
            // Add race result for each race
            for (i in raceResultPositionPoints..<raceResultPositionPoints+totalEntries) {
                val raceResult = raceResultsListOrderByPoints[i]
                val code = raceResult.raceResult.code
                // Check if the code is DNC(1)
                if (code != 1) {
                    html += "<tr class = \"" +
                            (if ((i+1)%2 == 0) {
                                "even racerow"
                            } else {"odd racerow"}) +
                            "\">" +
                            "<td>${raceResult.boatWithPYNumber.boat.boatClass}</td>" +
                            "<td>${raceResult.boatWithPYNumber.boat.sailNo}</td>" +
                            "<td>${raceResult.boatWithPYNumber.boat.helm}</td>" +
                            "<td>${raceResult.boatWithPYNumber.boat.crew}</td>" +
                            "<td>${raceResult.boatWithPYNumber.number.Number}</td>" +
                            "<td>" +
                            // Check if code applied
                            "${when (code) {
                                0 -> raceResult.raceResult.elapsedTime
                                2 -> "OOD"
                                3 -> "RET"
                                else -> "DNF"
                            } }" +
                            "</td>" +
                            "<td>${raceResult.raceResult.laps}</td>" +
                            "<td>${raceResult.raceResult.correctedTime}</td>" +
                            "<td>${raceResult.raceResult.points}</td>" +
                            "</tr>"
                }
            }
            // Update raceListPosition to get next sailor's race results
            raceResultPositionPoints += totalEntries
            // Race Table End
            html += "</tbody>" +
                    "</table>"
        }

        // Code Table Starts
        // Table for code used
        html += "<h3 class=\"codestitle\">Scoring codes used</h3>" +
                "<table class=\"codestable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">" +
                "<colgroup span=\"3\"><col class=\"code\" /><col class=\"description\" />" +
                "<col class=\"points\" />" +
                "</colgroup>" +
                "<tr class=\"titlerow\"><th>Code</th><th>Description</th>" +
                "<th>Points</th>" +
                "</tr>"
        codeList.forEach {
            val trClass =
                if ((codeList.indexOf(it)+1)%2 == 0) {"even coderow"} else {"odd coderow"}
            when(it) {
                // DNC
                1 -> {
                    html += "<tr class=\"$trClass\">" +
                            "<td>DNC</td>" +
                            "<td>Did not come to the starting area</td>" +
                            "<td>${totalEntries+1}</td>" +
                            "</tr>"
                }
                // OOD
                2 -> {
                    html += "<tr class=\"$trClass\">" +
                            "<td>OOD</td>" +
                            "<td>Race officer duty average points scored</td>" +
                            "<td>Varies</td>" +
                            "</tr>"
                }
                //RET
                3 -> {
                    html += "<tr class=\"$trClass\">" +
                            "<td>RET</td>" +
                            "<td>Retired</td>" +
                            "<td>Varies</td>" +
                            "</tr>"
                }
                // DNF
                4 -> {
                    html += "<tr class=\"$trClass\">" +
                            "<td>DNF</td>" +
                            "<td>Started but did not finish</td>" +
                            "<td>Varies</td>" +
                            "</tr>"
                }
            }
        }
        // Code Table End
        html += "</table>"

        // HTML File End
        html += "</body>" +
                "</html>"

        return html
    }

//
//    fun saveHTMLFile() {
//        val path = Environment.getExternalStorageDirectory().path
//        var fileName  = "test"
//        fileName = fileName+".html"
//        val file = File(path, fileName)
//        val html = generateHTMLFile()
//
//        try {
//            val out = FileOutputStream(file)
//            val data = html
//        }
//
}